{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedCountries","_this2","jQuery","vectorMap","map","enableZoom","backgroundColor","color","hoverOpacity","showTooltip","multiSelectRegion","selectedColor","showLabels","borderColor","onRegionClick","event","code","region","preventDefault","find","c","toLowerCase","Swal","title","concat","type","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","then","result","value","index","findIndex","splice","setState","push","toUpperCase","react_default","a","createElement","className","id","style","width","height","window","innerHeight","length","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAiFeA,qBA3Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,kBAAmB,IAHJR,mFAMC,IAAAS,EAAAN,KAClBO,OAAO,SAASC,UAAU,CACxBC,IAAK,WACLC,YAAY,EACZC,gBAAiB,UACjBC,MAAO,UACPC,aAAc,GACdC,aAAa,EACbC,mBAAmB,EACnBC,cAAe,UACfC,YAAY,EACZC,YAAa,OACbb,kBAAmBL,KAAKI,MAAMC,kBAC9Bc,cAAe,SAACC,EAAOC,EAAMC,GAC3BF,EAAMG,iBACFjB,EAAKF,MAAMC,kBAAkBmB,KAAK,SAAAC,GAAC,OAAIA,EAAEC,gBAAkBL,EAAKK,gBAClEC,IAAK,CACHC,MAAK,UAAAC,OAAYP,EAAZ,KACLQ,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,iBAAkB,eAClBC,kBAAmB,iBAClBC,KAAK,SAAAC,GACN,GAAIA,EAAOC,MAAO,CAChB,IAAMjC,EAAoBC,EAAKF,MAAMC,kBAC/BkC,EAAQlC,EAAkBmC,UAAU,SAAAf,GAAC,OAAIA,EAAEC,gBAAkBL,EAAKK,gBACxErB,EAAkBoC,OAAOF,EAAO,GAChCjC,EAAKoC,SAAS,CACZrC,sBAEFE,OAAO,SAASC,UAAU,WAAYa,MAI1CM,IAAK,CACHC,MAAK,oBAAAC,OAAsBP,EAAtB,KACLQ,KAAM,WACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,iBAAkB,eAClBC,kBAAmB,iBAClBC,KAAK,SAAAC,GACN,GAAIA,EAAOC,MAAO,CAChB,IAAMjC,EAAoBC,EAAKF,MAAMC,kBACrCA,EAAkBsC,KAAKtB,EAAKuB,eAC5BtC,EAAKoC,SAAS,CACZrC,sBAEFE,OAAO,SAASC,UAAU,SAAUa,GACpCM,IAAK,mBAAoB,6EAAsC,kDAQzE,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,OAAOC,MAAO,CAAEC,MAAO,OAAQC,OAAQC,OAAOC,eACtDT,EAAAC,EAAAC,cAAA,cAAS/C,KAAKI,MAAMC,kBAAkBkD,OAAtC,UAAqDvD,KAAKI,MAAMC,kBAAkBkD,OAAS,EAAI,MAAQ,IAAvG,oBAtEUC,cCOEC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.f2fb9169.chunk.js","sourcesContent":["/* global jQuery*/\nimport React, { Component } from \"react\";\nimport Swal from \"sweetalert2\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCountries: [],\n    };\n  }\n  componentDidMount() {\n    jQuery(\"#vmap\").vectorMap({\n      map: \"world_en\",\n      enableZoom: false,\n      backgroundColor: \"#343a41\",\n      color: \"#caa30a\",\n      hoverOpacity: 0.9,\n      showTooltip: true,\n      multiSelectRegion: true,\n      selectedColor: \"#00abe7\",\n      showLabels: false,\n      borderColor: \"#000\",\n      selectedCountries: this.state.selectedCountries,\n      onRegionClick: (event, code, region) => {\n        event.preventDefault();\n        if (this.state.selectedCountries.find(c => c.toLowerCase() === code.toLowerCase())) {\n          Swal({\n            title: `Remove ${region}?`,\n            type: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#3085d6\",\n            cancelButtonColor: \"#d33\",\n            cancelButtonText: \"👎\",\n            confirmButtonText: \"👍\"\n          }).then(result => {\n            if (result.value) {\n              const selectedCountries = this.state.selectedCountries;\n              const index = selectedCountries.findIndex(c => c.toLowerCase() === code.toLowerCase());\n              selectedCountries.splice(index, 1)\n              this.setState({\n                selectedCountries,\n              });\n              jQuery(\"#vmap\").vectorMap('deselect', code);\n            }\n          });\n        } else {\n          Swal({\n            title: `Have you visited ${region}?`,\n            type: \"question\",\n            showCancelButton: true,\n            confirmButtonColor: \"#3085d6\",\n            cancelButtonColor: \"#d33\",\n            cancelButtonText: \"👎\",\n            confirmButtonText: \"👍\"\n          }).then(result => {\n            if (result.value) {\n              const selectedCountries = this.state.selectedCountries;\n              selectedCountries.push(code.toUpperCase());\n              this.setState({\n                selectedCountries,\n              });\n              jQuery(\"#vmap\").vectorMap('select', code);\n              Swal(\"Country visited!\", \"🚌 🗺 You are an explorator! 😍 🧳\", \"success\");\n            }\n          });\n        }\n      },\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"vmap\" style={{ width: \"100%\", height: window.innerHeight }} />\n        <footer>{this.state.selectedCountries.length} countr{this.state.selectedCountries.length > 1 ? 'ies' : 'y'} visited</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}